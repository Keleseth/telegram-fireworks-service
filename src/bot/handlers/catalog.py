"""–§–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞."""

from http import HTTPStatus

import aiohttp
from telegram import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    Update,
)
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes

from src.bot.keyboards import keyboard_back
from src.bot.utils import croling_content

FIREWORK_CARD = """
üéÜ *{name}* üéÜ
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
üî¢ **–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞:** `{code}`
üìè **–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:** {measurement_unit}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {description}
üè∑Ô∏è **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category_id}
üì¶ **–†–∞–∑–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞:** {product_size}
üì¶ **–£–ø–∞–∫–æ–≤–æ—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:** {packing_material}
üí• **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤:** {charges_count}
‚ú® **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤:** {effects_count}
üî¢ **–ê—Ä—Ç–∏–∫—É–ª:** `{article}`
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
"""


CATEGORY_CARD = """
üìÇ *{name}*

üÜî **ID:** `{id}`
üìÇ **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ID:** {parent_category_id}
"""


navigation_keyboard = [
    [InlineKeyboardButton('–í–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥', callback_data='all_catalog')],
    [InlineKeyboardButton('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data='all_categories')],
    [InlineKeyboardButton('–ü–æ–¥–±–æ—Ä –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º', callback_data='parameters')],
    [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')],
]


def build_firework_card(fields: dict) -> str:
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–ª—É–∫—Ç–∞."""
    if not fields['description']:
        fields['description'] = croling_content('–û–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')
    if not fields['price']:
        fields['price'] = croling_content('–¶–µ–Ω–∞ –∑–∞ —Ç–æ–≤–∞—Ä –Ω–µ —É–∫–∞–∑–∞–Ω–∞')
    if not fields['tags']:
        fields['tags'] = croling_content('–î–ª—è —Ç–æ–≤–∞—Ä–∞ —Ç–µ–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã')
    if not fields['packing_material']:
        fields['packing_material'] = croling_content(
            '–ú–∞—Ç–µ—Ä–∏–∞–ª —É–ø–∞–∫–æ–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω'
        )
    return FIREWORK_CARD.format(
        name=fields['name'],
        code=fields['code'],
        measurement_unit=fields['measurement_unit'],
        description=fields['description'],
        category_id=fields['category_id'],
        product_size=fields['product_size'],
        packing_material=fields['packing_material'],
        charges_count=fields['charges_count'],
        effects_count=fields['effects_count'],
        article=fields['article'],
    )


def build_category_card(fields: dict) -> str:
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    return CATEGORY_CARD.format(
        name=fields['name'],
        id=fields['id'],
        parent_category_id=fields['parent_category_id'],
    )


async def send_callback_message(
    query: CallbackQuery,
    content: str,
    reply_markup: InlineKeyboardMarkup | None,
) -> Message:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Markdown2 —Ñ–æ—Ä–º–∞—Ç–µ."""
    return await query.message.reply_text(
        content, parse_mode='MarkdownV2', reply_markup=reply_markup
    )


def build_filter_params_keyboard(filter_param_name: str):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    –ö–Ω–æ–ø–∫–∏:
        1. –Ω–∞–∑–∞–¥.
    """
    keyboard = [
        [
            InlineKeyboardButton(
                '–ù–∞–∑–∞–¥', callback_data=f'back_to_{filter_param_name}'
            )
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def build_back_keyboard(
    message: str, back_point: str
) -> list[InlineKeyboardButton]:
    """–°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π `–Ω–∞–∑–∞–¥`."""
    return [
        [InlineKeyboardButton(message, callback_data=f'back_to_{back_point}')]
    ]


def build_cart_and_favorite_keyboard(
    firework_id: str,
) -> list[InlineKeyboardButton]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.

    –ö–Ω–æ–ø–∫–∏:
        1. –í –∫–æ—Ä–∑–∏–Ω—É.
        2. –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
    """
    return [
        [
            InlineKeyboardButton(
                '–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart_{firework_id}'
            )
        ],
        [
            InlineKeyboardButton(
                '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data=f'add_to_favorite_{firework_id}'
            )
        ],
    ]


async def catalog_menu(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        '–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ',
        reply_markup=InlineKeyboardMarkup(navigation_keyboard),
    )


async def show_all_products(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    url: str | None = 'http://127.0.0.1:8000/fireworks',
) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()
    if context.user_data.get('message_ids'):
        for message_id in context.user_data['message_ids']:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id, message_id=message_id
            )
    next_page_url = previous_page_url = None
    async with aiohttp.ClientSession() as session:
        async with session.post(url) as response:
            if response.status == HTTPStatus.OK:
                data = await response.json()
                fireworks = data['fireworks']
                message_ids = []
                for firework in fireworks:
                    message = await send_callback_message(
                        query,
                        build_firework_card(firework),
                        reply_markup=InlineKeyboardMarkup(
                            build_cart_and_favorite_keyboard(
                                firework_id=firework['id']
                            )
                        ),
                    )
                    message_ids.append(message.id)
                context.user_data['message_ids'] = message_ids
                if data.get('next_page_url'):
                    next_page_url = data['next_page_url']
                if data.get('previous_page_url'):
                    previous_page_url = data['previous_page_url']
            else:
                context.user_data['message_ids'] = message_ids
                await query.message.reply_text(
                    '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞:',
                    reply_markup=InlineKeyboardMarkup(keyboard_back),
                )
    keyboard = build_back_keyboard('–í –∫–∞—Ç–∞–ª–æ–≥', 'catalog')
    if next_page_url:
        keyboard.append([
            InlineKeyboardButton(
                '–í–ø–µ—Ä—ë–¥', callback_data=f'pg-pr_{next_page_url}'
            )
        ])
    if previous_page_url:
        keyboard.append([
            InlineKeyboardButton(
                '–ù–∞–∑–∞–¥', callback_data=f'pg-pr_{previous_page_url}'
            )
        ])
    await query.message.reply_text(
        '–ù–∞–≤–∏–≥–∞—Ü–∏—è:', reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def back_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ `–Ω–∞–∑–∞–¥`."""
    query = update.callback_query
    await query.answer()
    target_point = query.data.split('_')[-1]
    if target_point == 'catalog':
        await catalog_menu(update, context)
    else:
        await query.message.reply('–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ /menu')


async def pagination_handler(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ `–≤–ø–µ—Ä–µ–¥` –∏ `–Ω–∞–∑–∞–¥` –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    query = update.callback_query
    await query.answer()
    target_pagination_point, url = query.data.split('_')
    if target_pagination_point == 'pg-pr':
        await show_all_products(update, context, url)
    elif target_pagination_point == 'pg-cat':
        await show_all_categories(update, context, url)


async def show_all_categories(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    url: str | None = 'http://127.0.0.1:8000/categories',
) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    query = update.callback_query
    await query.answer()
    if context.user_data.get('message_ids'):
        for message_id in context.user_data['message_ids']:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id, message_id=message_id
            )
    next_page_url = previous_page_url = None
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == HTTPStatus.OK:
                data = await response.json()
                categories = data['categories']
                message_ids = []
                for category in categories:
                    keyboard = [
                        [
                            InlineKeyboardButton(
                                '–ü–æ–¥—Ä–æ–±–Ω–µ–µ',
                                callback_data=f'category_{category["id"]}',
                            )
                        ]
                    ]
                    message = await send_callback_message(
                        query,
                        build_category_card(category),
                        reply_markup=InlineKeyboardMarkup(keyboard),
                    )
                    message_ids.append(message.id)
                context.user_data['message_ids'] = message_ids
                if data.get('next_page_url'):
                    next_page_url = data['next_page_url']
                if data.get('previous_page_url'):
                    previous_page_url = data['previous_page_url']
            else:
                context.user_data['message_ids'] = message_ids
                await query.message.reply_text(
                    '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞:',
                    reply_markup=InlineKeyboardMarkup(keyboard_back),
                )
    keyboard = build_back_keyboard('–í –∫–∞—Ç–∞–ª–æ–≥', 'catalog')
    if next_page_url:
        keyboard.append([
            InlineKeyboardButton(
                '–í–ø–µ—Ä—ë–¥', callback_data=f'pg-cat_{next_page_url}'
            )
        ])
    if previous_page_url:
        keyboard.append([
            InlineKeyboardButton(
                '–ù–∞–∑–∞–¥', callback_data=f'pg-cat_{previous_page_url}'
            )
        ])
    await query.message.reply_text(
        '–ù–∞–≤–∏–≥–∞—Ü–∏—è:', reply_markup=InlineKeyboardMarkup(keyboard)
    )


# async def show_categories_inline_handler(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ show_categories."""
#     query = update.callback_query
#     await query.answer()
#     option = query.data
#     if option.startswith('category_'):
#         return await show_categories_fireworks(update, context)
#     return await show_all_categories(update, context)


async def show_categories_fireworks(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    # category_id = update.callback_query.data.split('_')[-1]
    # TODO –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î
    fireworks = ['Firework_category1', 'Firework_category2']
    for firework in fireworks:
        keyboard = [
            [
                InlineKeyboardButton(
                    '–í –∫–æ—Ä–∑–∏–Ω—É', callback_data=f'add_to_cart_{firework}'
                ),
                InlineKeyboardButton(
                    '–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data=f'add_to_favorite_{firework}'
                ),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.reply_text(
            firework, reply_markup=reply_markup
        )
    await update.callback_query.message.reply_text(
        '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back_to_categories')]
        ]),
    )


def catalog_register(application: ApplicationBuilder) -> None:
    application.add_handler(
        CallbackQueryHandler(pagination_handler, pattern='^pg-')
    )
    application.add_handler(
        CallbackQueryHandler(catalog_menu, pattern='^catalog$')
    )
    application.add_handler(
        CallbackQueryHandler(show_all_products, pattern='^all_catalog$')
    )
    application.add_handler(
        CallbackQueryHandler(show_all_categories, pattern='^all_categories$')
    )
    application.add_handler(
        CallbackQueryHandler(back_button, pattern='^back_to_')
    )


# async def selection_by_parameters(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ) -> None:
#     await update.callback_query.edit_message_text(
#         '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
#     )
#     return NAME


# async def select_name(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     context.user_data['filter'] = FireworkFilterSchema(
#         name=update.message.text
#     )
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return CHARGES_COUNT


# async def skip_name(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     context.user_data['filter'] = FireworkFilterSchema()
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä—è–¥–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return CHARGES_COUNT


# async def select_charges_count(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     context.user_data['filter'].charges_count = int(update.message.text)
#     await update.message.reply_text(
#         '–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return CATEGORIES


# async def skip_charges_count(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return CATEGORIES


# async def select_categories(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     # TODO –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     context.user_data['filter'].categories = [
#         category for category in update.message.text.split()
#     ]
#     await update.message.reply_text(
#         '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return ARTICLE


# async def skip_categories(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     await update.message.reply_text(
#         '–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return ARTICLE


# async def select_article(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     context.user_data['filter'].article = update.message.text
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return TAGS


# async def skip_article(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–≥–∏ —Ç–æ–≤–∞—Ä–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return TAGS


# async def select_tags(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     tag_names = []
#     context.user_data['filter'].tags = [
#         tag_name for tag_name in tag_names
#     ]
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return MIN_PRICE


# async def skip_tags(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return MIN_PRICE


# async def select_min_price(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     context.user_data['filter'].min_price = update.message.text
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return MAX_PRICE


# async def skip_min_price(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return MAX_PRICE


# async def select_max_price(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     context.user_data['filter'].max_price = update.message.text
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return ORDER_BY


# async def skip_max_price(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     await update.message.reply_text(
#         '–£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:',
#         reply_markup=build_filter_params_keyboard(
#             inspect.currentframe().f_code.co_name
#         )
#     )
#     return ORDER_BY


# async def select_order_by(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     orders_by = [
#         order_by for order_by in update.message.text
#     ]
#     context.user_data['filter'].order_by = orders_by
#     await apply_filters(update, context)
#     return ConversationHandler.END


# async def skip_order_by(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ):
#     await apply_filters(update, context)
#     return ConversationHandler.END


# async def apply_filters(
#     update: Update,
#     context: ContextTypes.DEFAULT_TYPE
# ) -> None:
#     filter_data = context.user_data['filter_data']
#     # TODO –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É API get_multi —Å filter_schema
#     fireworks = []
#     if fireworks:
#         for firework in fireworks:
#             await update.message.reply_text(
#                 firework,
#                 reply_markup=InlineKeyboardMarkup(
#                     build_cart_and_favorite_keyboard()
#                 )
#             )
#     else:
#         await update.message.reply_text(
#             '–¢–æ–≤–∞—Ä—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã('
#         )
