import logging
from typing import List

from aiohttp import ClientSession
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    WebAppInfo,
)
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from src.bot.keyboards import keyboard_main  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º keyboard_main

API_URL = 'http://localhost:8000'
(
    MAIN_MENU,
    EDIT_PROFILE,
    EDIT_EMAIL,
    EDIT_NAME,
    EDIT_NICKNAME,
    EDIT_BIRTHDATE,
    EDIT_PHONE,
    ADMIN_MENU,
    ADMIN_EDIT_EMAIL,
    ADMIN_EDIT_PASSWORD,
    AGE_VERIFICATION,
) = range(11)




class TelegramUserManager:
    def __init__(self, application: ApplicationBuilder) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è."""
        self.app = application
        self._register_handlers()

    def _register_handlers(self) -> None:
        # –û—Å–Ω–æ–≤–Ω–æ–π ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', self.start),
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, self.start_conversation
                ),
            ],
            states={
                MAIN_MENU: [
                    MessageHandler(
                        filters.Text(['üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']),
                        self.show_profile,
                    ),
                    MessageHandler(
                        filters.Text(['üöß –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É']),
                        self.handle_admin_menu_buttons,
                    ),
                ],
                EDIT_PROFILE: [
                    MessageHandler(
                        filters.Text(['üìß –ò–∑–º–µ–Ω–∏—Ç—å email']),
                        self.start_edit_email,
                    ),
                    MessageHandler(
                        filters.Text(['üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è']), self.start_edit_name
                    ),
                    MessageHandler(
                        filters.Text(['üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º']),
                        self.start_edit_nickname,
                    ),
                    MessageHandler(
                        filters.Text(['üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è']),
                        self.start_edit_birthdate,
                    ),
                    MessageHandler(
                        filters.Text(['üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω']),
                        self.start_edit_phone,
                    ),
                    MessageHandler(
                        filters.Text(['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']),
                        self.back_to_menu,
                    ),
                    MessageHandler(
                        filters.Text(['üöß –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É']),
                        self.handle_admin_menu_buttons,
                    ),
                ],
                EDIT_EMAIL: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, self.edit_email
                    )
                ],
                EDIT_NAME: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, self.edit_name
                    )
                ],
                EDIT_NICKNAME: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, self.edit_nickname
                    )
                ],
                EDIT_BIRTHDATE: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, self.edit_birthdate
                    )
                ],
                EDIT_PHONE: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, self.edit_phone
                    )
                ],
                ADMIN_MENU: [
                    MessageHandler(
                        filters.Text(['üöß üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å üöß']),
                        self.admin_start_edit_password,
                    ),
                    MessageHandler(
                        filters.Text(['üöß üìß –ò–∑–º–µ–Ω–∏—Ç—å email üöß']),
                        self.admin_start_edit_email,
                    ),
                    MessageHandler(
                        filters.Text(['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']),
                        self.back_to_menu,
                    ),
                ],
                ADMIN_EDIT_EMAIL: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND, self.admin_edit_email
                    )
                ],
                ADMIN_EDIT_PASSWORD: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.admin_edit_password,
                    )
                ],
                AGE_VERIFICATION: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.handle_age_verification,
                    )
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel_conversation)],
            map_to_parent={
                ConversationHandler.END: MAIN_MENU,
            },
        )

        self.app.add_handler(conv_handler)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
        user = await self._fetch_user_data(update.effective_user.id)
        if not user:
            await update.message.reply_text(
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:'
            )
            return AGE_VERIFICATION
        return await self.show_main_menu(update, context)

    async def start_conversation(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞."""
        if not await self.check_registration(update.effective_user.id):
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
            return AGE_VERIFICATION
        return await self.show_main_menu(update, context)

    async def handle_age_verification(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞."""
        try:
            age = int(update.message.text)
            if not (18 <= age <= 115):
                raise ValueError

            if await self.register_user(update, age):
                return await self.show_main_menu(update, context)

        except ValueError:
            await update.message.reply_text(
                '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 115:'
            )

        return AGE_VERIFICATION

    async def refresh_keyboard(self, update: Update):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        try:
            new_keyboard = await self._get_main_keyboard(
                update.effective_user.id
            )
            await update.effective_message.reply_text(
                text='ü§ñ –∑–∞–≥—Ä—É–∑–∫–∞...',  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
                reply_markup=new_keyboard,
            )
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}')

    async def handle_admin_menu_buttons(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."""
        user_data = await self._admin_fetch_user_data(update.effective_user.id)

        if not user_data.get('is_admin'):
            await update.message.reply_text('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!')
            return MAIN_MENU

        if not (user_data.get('email') and user_data.get('hashed_password')):
            buttons = []
            if not user_data.get('email'):
                buttons.append(['üöß üìß –ò–∑–º–µ–Ω–∏—Ç—å email üöß'])
            if not user_data.get('hashed_password'):
                buttons.append(['üöß üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å üöß'])
            buttons.append(['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'])

            await update.message.reply_text(
                (
                    '‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω–∫—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ'
                    ' —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å email –∏ –ø–∞—Ä–æ–ª—å!'
                ),
                reply_markup=ReplyKeyboardMarkup(
                    buttons, resize_keyboard=True
                ),
            )
            return ADMIN_MENU

        # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É!!!
        web_app_url = 'https://habr.com/ru/companies/amvera/articles/849836/'
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    '–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω–∫—É üöÄ', web_app=WebAppInfo(url=web_app_url)
                )
            ]
        ])

        await update.message.reply_text(
            'üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', reply_markup=keyboard
        )
        return MAIN_MENU

    async def _fetch_user_data(self, telegram_id: int) -> dict | None:
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with ClientSession() as session:
            async with session.post(
                f'{API_URL}/users',
                json={'telegram_id': telegram_id},
            ) as response:
                if response.status == 200:
                    return await response.json()
                return None

    async def _admin_fetch_user_data(self, telegram_id: int) -> dict | None:
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with ClientSession() as session:
            async with session.post(
                f'{API_URL}/moderator',
                json={'telegram_id': telegram_id},
            ) as response:
                if response.status == 200:
                    return await response.json()
                return None

    def _get_profile_keyboard(self, is_admin: bool) -> List[List[str]]:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
        buttons = [
            ['üìß –ò–∑–º–µ–Ω–∏—Ç—å email', 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è'],
            ['üè∑Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º', 'üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è'],
            ['üì± –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'],
            ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'],
        ]
        if is_admin:
            buttons[-1].append('üöß –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É')
        return buttons

    async def show_profile(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_data = await self._fetch_user_data(update.effective_user.id)

        profile_text = (
            'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n'
            f'üìß Email: {user_data.get("email", "–Ω–µ —É–∫–∞–∑–∞–Ω")}\n'
            f'üìù –ò–º—è: {user_data["name"]}\n'
            f'üè∑Ô∏è –ù–∏–∫–Ω–µ–π–º: {user_data.get("nickname", "–Ω–µ —É–∫–∞–∑–∞–Ω")}\n'
            f'üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data.get("birth_date", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")}\n'
            f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get("phone_number", "–Ω–µ —É–∫–∞–∑–∞–Ω")}\n'
            f'üîû –í–æ–∑—Ä–∞—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω: ‚úÖ'
        )

        keyboard = ReplyKeyboardMarkup(
            self._get_profile_keyboard(user_data.get('is_admin', False)),
            resize_keyboard=True,
        )

        await update.message.reply_text(profile_text, reply_markup=keyboard)
        return EDIT_PROFILE

    async def start_edit_email(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email."""
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:', reply_markup=ReplyKeyboardRemove()
        )
        return EDIT_EMAIL

    async def edit_email(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email."""
        try:
            await self._update_profile(update, 'email', update.message.text)
            await update.message.reply_text('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            return await self.show_profile(update, context)
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ ‚ùå')
            logging.error(f'{e}')
            return await self.show_profile(update, context)

    async def admin_start_edit_email(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è email."""
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:', reply_markup=ReplyKeyboardRemove()
        )
        return ADMIN_EDIT_EMAIL

    async def admin_edit_email(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email."""
        try:
            await self._update_profile(update, 'email', update.message.text)
            await update.message.reply_text('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            return await self.show_profile(update, context)
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ ‚ùå')
            logging.error(f'{e}')
            return await self.show_profile(update, context)

    async def admin_start_edit_password(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è password."""
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:', reply_markup=ReplyKeyboardRemove()
        )
        return ADMIN_EDIT_PASSWORD

    async def admin_edit_password(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ password."""
        try:
            await self._admin_update_profile(
                update, 'hashed_password', update.message.text
            )
            await update.message.reply_text('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
            return await self.show_profile(update, context)
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ ‚ùå')
            logging.error(f'{e}')
            return await self.handle_admin_menu_buttons(update, context)

    async def start_edit_name(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è name."""
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', reply_markup=ReplyKeyboardRemove()
        )
        return EDIT_NAME

    async def edit_name(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ name."""
        try:
            await self._update_profile(update, 'name', update.message.text)
            await update.message.reply_text('‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
            return await self.show_profile(update, context)
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ ‚ùå')
            logging.error(f'{e}')
            return await self.show_profile(update, context)

    async def start_edit_nickname(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è nickname."""
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π nickname:', reply_markup=ReplyKeyboardRemove()
        )
        return EDIT_NICKNAME

    async def edit_nickname(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ nickname."""
        try:
            await self._update_profile(update, 'nickname', update.message.text)
            await update.message.reply_text('‚úÖ nickname —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
            return await self.show_profile(update, context)
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ ‚ùå')
            logging.error(f'{e}')
            return await self.show_profile(update, context)

    async def start_edit_birthdate(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è birthdate."""
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è:', reply_markup=ReplyKeyboardRemove()
        )
        return EDIT_BIRTHDATE

    async def edit_birthdate(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ birthdate."""
        try:
            await self._update_profile(
                update, 'birth_date', update.message.text
            )
            await update.message.reply_text(
                '‚úÖ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!'
            )
            return await self.show_profile(update, context)
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ ‚ùå')
            logging.error(f'{e}')
            return await self.show_profile(update, context)

    async def start_edit_phone(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è phone."""
        await update.message.reply_text(
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞ +7**********:',
            reply_markup=ReplyKeyboardRemove(),
        )
        return EDIT_BIRTHDATE

    async def edit_phone(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ phone."""
        try:
            await self._update_profile(update, 'phone', update.message.text)
            await update.message.reply_text(
                '‚úÖ –Ω–æ–º–µ—Ä—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!'
            )
            return await self.show_profile(update, context)
        except Exception as e:
            await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ ‚ùå')
            logging.error(f'{e}')
            return await self.show_profile(update, context)

    async def back_to_menu(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
        return await self.show_main_menu(update, context)

    async def check_data_input(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        user_id = update.effective_user.id

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if user_id in self.edit_states:
            field = self.edit_states.pop(user_id)
            value = update.message.text

            try:
                await self._update_profile(update, field, value)
                await update.message.reply_text('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                await self.show_profile(update, context)
            except Exception as e:
                await update.message.reply_text(
                    '‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚ùå'
                )
                logging.debug(f'–û—à–∏–±–∫–∞: {e}')
                await self.show_profile(update, context)

        elif user_id in self.admin_setup_states:
            user_data = await self._admin_fetch_user_data(user_id)
            is_admin = user_data.get('is_admin', False) if user_data else False
            if not is_admin:
                await update.message.reply_text(
                    'üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ üö´'
                )
                return

            field = self.admin_setup_states.pop(user_id)
            value = update.message.text

            try:
                await self._admin_update_profile(update, field, value)
                await update.message.reply_text('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!')
                await self.handle_admin_menu_buttons(update, context)
            except Exception as e:
                await update.message.reply_text(
                    '‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚ùå'
                )
                logging.debug(f'–û—à–∏–±–∫–∞: {e}')
                await self.handle_admin_menu_buttons(update, context)

        # –ï—Å–ª–∏ –ù–ï –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        else:
            # –í–∞—à–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞
            if not await self.check_registration(update.effective_user.id):
                success = await self.register_user(update, context)
                if not success:
                    await update.message.reply_text(
                        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:'
                    )

    async def _update_profile(
        self, update: Update, field: str, value: str
    ) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API."""
        try:
            user_telegram_id = update.effective_user.id
            logging.debug(f'–û—Ç–ø—Ä–∞–≤–∫–∞ PATCH-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—è {field}')

            async with ClientSession() as session:
                async with session.patch(
                    f'{API_URL}/users',
                    json={field: value, 'telegram_id': user_telegram_id},
                ) as response:
                    response_data = await response.json()
                    logging.debug(
                        f'–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status} {response_data}'
                    )

                    if response.status != 200:
                        error_msg = response_data.get(
                            'detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                        )
                        raise Exception(f'API Error: {error_msg}')

        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}')
            raise

    async def _admin_update_profile(
        self, update: Update, field: str, value: str
    ) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API."""
        try:
            user_telegram_id = update.effective_user.id
            logging.debug(f'–û—Ç–ø—Ä–∞–≤–∫–∞ PATCH-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—è {field}')

            async with ClientSession() as session:
                async with session.patch(
                    f'{API_URL}/moderator/{user_telegram_id}',
                    json={field: value},
                ) as response:
                    response_data = await response.json()
                    logging.debug(
                        f'–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.status} {response_data}'
                    )

                    if response.status != 200:
                        error_msg = response_data.get(
                            'detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
                        )
                        raise Exception(f'API Error: {error_msg}')

        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}')
            raise

    async def show_main_menu(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        await self.refresh_keyboard(update)
        await update.message.reply_text(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=InlineKeyboardMarkup(keyboard_main)
        )
        return MAIN_MENU

    async def _get_main_keyboard(self, user_id: int) -> ReplyKeyboardMarkup:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
        user_data = await self._fetch_user_data(user_id)
        is_admin = user_data.get('is_admin', False) if user_data else False

        buttons = [['üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']]
        if is_admin:
            buttons[0].append('üöß –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É')

        return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

    async def check_registration(self, user_telegram_id: int) -> dict | None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return await self._fetch_user_data(user_telegram_id)

    async def register_user(
        self,
        update: Update,
        context: CallbackContext,
    ):
        try:
            age = int(update.message.text)
            if age < 18:
                await update.message.reply_text(
                    '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!', reply_markup=ReplyKeyboardRemove()
                )
                return False
            if age > 115:
                await update.message.reply_text(
                    '–°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!',
                    reply_markup=ReplyKeyboardRemove(),
                )
                return False

            async with ClientSession() as session:
                async with session.post(
                    f'{API_URL}/auth/telegram-register',
                    json={
                        'telegram_id': update.effective_user.id,
                        'name': update.effective_user.full_name,
                        'age_verified': True,
                    },
                ) as response:
                    print(response.status)
                    if response.status == 200:
                        user_data = await response.json()
                        is_admin = user_data.get('is_admin', False)
                        await update.message.reply_text(
                            '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                            reply_markup=self.main_keyboard(is_admin),
                        )
                        return True
                    return False
        except ValueError:
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
            return False

    def main_keyboard(self, is_admin: bool = False):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        buttons = [['üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']]
        if is_admin:
            buttons[0].append('üöß –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É')
        return ReplyKeyboardMarkup(
            buttons,
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder='‚Üì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì',
        )

    async def check_age_input(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        if not await self.check_registration(update.effective_user.id):
            success = await self.register_user(update, context)
            if not success:
                await update.message.reply_text(
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:'
                )

    async def cancel_conversation(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""
        await update.message.reply_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
            reply_markup=await self._get_main_keyboard(
                update.effective_user.id
            ),
        )
        return ConversationHandler.END
