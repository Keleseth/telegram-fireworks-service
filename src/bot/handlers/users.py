import logging

from aiohttp import ClientSession
from telegram import (
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    ContextTypes,
    MessageHandler,
    filters,
)

from src.bot.keyboards import keyboard_main  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º keyboard_main

API_URL = 'http://127.0.0.1:8000'


class UserManager:
    def __init__(self, application: ApplicationBuilder) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è."""
        self.app = application
        self._register_handlers()

    def _register_handlers(self) -> None:
        # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        self.app.add_handler(
            MessageHandler(
                filters.Text(['üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'üõ°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É'])
                & ~filters.COMMAND,
                self.handle_menu_buttons,
            )
        )
        self.app.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND, self.check_age_input
            )
        )

    async def get_dynamic_keyboard(
        self, telegram_id: int
    ) -> ReplyKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏."""
        user_data = await self._fetch_user_data(telegram_id)
        is_admin = user_data.get('is_admin', False) if user_data else False

        buttons = [['üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']]
        if is_admin:
            buttons[0].append('üõ°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É')

        return ReplyKeyboardMarkup(
            buttons, resize_keyboard=True, one_time_keyboard=False
        )

    async def refresh_keyboard(self, update: Update):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
        try:
            new_keyboard = await self.get_dynamic_keyboard(
                update.effective_user.id
            )
            await update.message.reply_text(
                text='ü§ñ –∑–∞–≥—Ä—É–∑–∫–∞...',  # –ù–µ–≤–∏–¥–∏–º—ã–π —Å–∏–º–≤–æ–ª
                reply_markup=new_keyboard,
            )
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}')

    async def _fetch_user_data(self, telegram_id: int) -> dict | None:
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        async with ClientSession() as session:
            async with session.get(
                f'{API_URL}/users/{telegram_id}'
            ) as response:
                if response.status == 200:
                    return await response.json()
                return None

    async def _send_main_menu(self, update: Update) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
        keyboard = await self.get_dynamic_keyboard(update.effective_user.id)
        await update.message.reply_text(
            text='ü§ñ –∑–∞–≥—Ä—É–∑–∫–∞...', reply_markup=keyboard
        )

        await update.message.reply_text(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=InlineKeyboardMarkup(keyboard_main)
        )

    async def check_registration(self, user_telegram_id: int) -> dict | None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return await self._fetch_user_data(user_telegram_id)

    async def register_user(
        self,
        update: Update,
        context: CallbackContext,
    ):
        try:
            age = int(update.message.text)
            if age < 18:
                await update.message.reply_text(
                    '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!', reply_markup=ReplyKeyboardRemove()
                )
                return False

            async with ClientSession() as session:
                async with session.post(
                    f'{API_URL}/auth/telegram-register',
                    json={
                        'telegram_id': update.effective_user.id,
                        'name': update.effective_user.full_name,
                        'age_verified': True,
                    },
                ) as response:
                    if response.status == 200:
                        user_data = await response.json()
                        is_admin = user_data.get('is_admin', False)
                        await update.message.reply_text(
                            '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
                            reply_markup=self.main_keyboard(is_admin),
                        )
                        await self._send_main_menu(
                            update,
                        )
                        return True
                    return False
        except ValueError:
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!')
            return False

    def main_keyboard(self, is_admin: bool = False):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
        buttons = [['üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']]
        if is_admin:
            buttons[0].append('üõ°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É')
        return ReplyKeyboardMarkup(
            buttons,
            resize_keyboard=True,
            one_time_keyboard=False,
            input_field_placeholder='‚Üì –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì',
        )

    async def check_age_input(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        if not await self.check_registration(update.effective_user.id):
            success = await self.register_user(update, context)
            if not success:
                await update.message.reply_text(
                    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:'
                )

    async def handle_menu_buttons(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
        user_data = await self._fetch_user_data(update.effective_user.id)

        text = update.message.text
        if text == 'üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
            await self.refresh_keyboard(update)
            await update.message.reply_text("–†–∞–∑–¥–µ–ª '–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è'...")

        elif text == 'üõ°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É':
            await self.refresh_keyboard(update)
            if user_data and user_data.get('is_admin'):
                await update.message.reply_text('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...')
            else:
                await update.message.reply_text('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!')
