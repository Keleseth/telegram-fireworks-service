import aiohttp
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ContextTypes

API_BASE_URL = 'http://127.0.0.1:8000'


async def send_request(method: str, url: str, data: dict = None) -> dict:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
    async with aiohttp.ClientSession() as session:
        async with getattr(session, method)(url, json=data) as response:
            if response.status == 200:
                return await response.json()
            error_message = await response.text()
            print(f'Error Message: {error_message}')
            return {'error': error_message}


async def add_to_cart(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ API."""
    query = update.callback_query
    await query.answer()

    product_id = query.data.split('_')[-1]
    user_id = str(update.effective_user.id)

    data = await send_request(
        'post',
        f'{API_BASE_URL}/user/cart',
        {
            'firework_id': int(product_id),
            'quantity': 1,
            'telegram_id': user_id,
        },
    )

    await query.message.reply_text(
        data.get('message', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É')
    )


async def checkout(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)

    cart_messages = context.user_data.get('cart_messages', [])
    if cart_messages:
        for message_id in cart_messages:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id, message_id=message_id
                )
                print(f'–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}')
            except Exception as e:
                print(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}')

        context.user_data['cart_messages'] = []

    data = await send_request(
        'post', f'{API_BASE_URL}/orders', {'telegram_id': user_id}
    )

    if 'error' not in data:
        await query.message.reply_text(
            '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.'
        )
    else:
        await query.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )


async def view_cart(update: Update, context: CallbackContext) -> None:
    message = (
        update.message if update.message else update.callback_query.message
    )
    user_id = str(update.effective_user.id)

    data = await send_request(
        'post', f'{API_BASE_URL}/user/cart/me', {'telegram_id': user_id}
    )

    if 'error' in data:
        print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã, —Å—Ç–∞—Ç—É—Å: {data["error"]}')
        await message.reply_text(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã: {data["error"]}'
        )
        return

    if isinstance(data, list):
        cart_items = data
    elif isinstance(data, dict):
        cart_items = data.get('items', [])
    else:
        cart_items = []

    if not cart_items:
        await message.reply_text('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        return

    context.user_data['cart_items'] = cart_items
    context.user_data['cart_messages'] = []

    if update.callback_query:
        if 'cart_message' in context.user_data:
            cart_message = context.user_data['cart_message']
            try:
                await cart_message.edit_text(
                    'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n', parse_mode='Markdown'
                )
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
                cart_message = await message.reply_text(
                    'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n', parse_mode='Markdown'
                )
                context.user_data['cart_messages'].append(
                    cart_message.message_id
                )
        else:
            cart_message = await message.reply_text(
                'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n', parse_mode='Markdown'
            )
            context.user_data['cart_messages'].append(cart_message.message_id)
    else:
        cart_message = await message.reply_text(
            'üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n', parse_mode='Markdown'
        )
        context.user_data['cart_messages'].append(cart_message.message_id)

    total_price = 0
    buttons = []
    for item in cart_items:
        product_name = item['firework']['name']
        amount = item['amount']
        price = float(item['firework']['price']) * amount
        cost = float(item['firework']['price'])
        total_price += price

        cart_text = (
            f'üîπ *{product_name}*: {amount} —à—Ç. '
            f'–¶–µ–Ω–∞ –∑–∞ —à—Ç.: {cost:.0f}. –°—Ç–æ–∏–º–æ—Å—Ç—å - {price:.0f}'
        )

        buttons = [
            [
                InlineKeyboardButton(
                    '‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    callback_data=f'change_item_{str(item["id"])}',
                )
            ],
            [
                InlineKeyboardButton(
                    '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f'remove_{str(item["id"])}'
                )
            ],
        ]

        message = await message.reply_text(
            cart_text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='Markdown',
        )
        context.user_data['cart_messages'].append(message.message_id)

    checkout_buttons = [
        [
            InlineKeyboardButton(
                '‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='clear_cart'
            )
        ],
        [InlineKeyboardButton('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='checkout')],
    ]
    total_price_message = await message.reply_text(
        f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã: {total_price:.0f}',
        reply_markup=InlineKeyboardMarkup(checkout_buttons),
        parse_mode='Markdown',
    )
    context.user_data['cart_messages'].append(total_price_message.message_id)


async def change_quantity(
    update: Update, context: CallbackContext, item_id: str
):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞."""
    context.user_data['current_item_id'] = item_id
    cart_items = context.user_data.get('cart_items', [])
    product_name = next(
        (
            item['firework']['name']
            for item in cart_items
            if str(item['id']) == item_id
        ),
        None,
    )

    if not product_name:
        await update.callback_query.message.reply_text(
            '–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        )
        return

    cart_messages = context.user_data.get('cart_messages', [])
    if cart_messages:
        for message_id in cart_messages:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id, message_id=message_id
                )
                print(f'–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}')
            except Exception as e:
                print(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}')

        context.user_data['cart_messages'] = []

    await update.callback_query.message.reply_text(
        f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {product_name}:'
    )


async def handle_new_quantity(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    new_amount = update.message.text.strip()

    if not new_amount.isdigit() or int(new_amount) <= 0:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.'
        )
        return

    new_amount = int(new_amount)

    item_id = context.user_data.get('current_item_id')
    if item_id is None:
        await update.message.reply_text(
            '–û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.'
        )
        return

    cart_items = context.user_data.get('cart_items', [])
    product_name = next(
        (
            item['firework']['name']
            for item in cart_items
            if str(item['id']) == item_id
        ),
        None,
    )

    if not product_name:
        await update.message.reply_text('–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return

    user_id = str(update.effective_user.id)
    data = await send_request(
        'patch',
        f'{API_BASE_URL}/user/cart/{item_id}',
        {
            'update_data': {'telegram_id': user_id, 'amount': new_amount},
            'user_ident': {'telegram_id': user_id},
        },
    )

    if 'error' in data:
        await update.message.reply_text(
            f'‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {data["error"]}'
        )
    else:
        await update.message.reply_text(
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {product_name} '
            f'—É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {new_amount} —à—Ç.'
        )

    await view_cart(update, context)


async def remove_item(
    update: Update, context: CallbackContext, item_id: str
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)

    cart_items = context.user_data.get('cart_items', [])
    product_name = next(
        (
            item['firework']['name']
            for item in cart_items
            if str(item['id']) == item_id
        ),
        None,
    )

    if not product_name:
        await update.callback_query.message.reply_text(
            '–û—à–∏–±–∫–∞: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        )
        return

    cart_messages = context.user_data.get('cart_messages', [])
    if cart_messages:
        for message_id in cart_messages:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id, message_id=message_id
                )
                print(f'–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}')
            except Exception as e:
                print(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}')

        context.user_data['cart_messages'] = []

    async with aiohttp.ClientSession() as session:
        async with session.delete(
            f'{API_BASE_URL}/user/cart/{item_id}',
            json={'telegram_id': user_id},
        ) as response:
            if response.status == 200:
                await query.message.reply_text(
                    f'‚úÖ –¢–æ–≤–∞—Ä {product_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.'
                )
            else:
                error_message = await response.text()
                await query.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {error_message}')

    await view_cart(update, context)


async def clear_cart_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)

    cart_messages = context.user_data.get('cart_messages', [])
    if cart_messages:
        for message_id in cart_messages:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id, message_id=message_id
                )
                print(f'–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}')
            except Exception as e:
                print(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}')

        context.user_data['cart_messages'] = []

    async with aiohttp.ClientSession() as session:
        async with session.delete(
            f'{API_BASE_URL}/user/cart/',
            json={'telegram_id': user_id},
        ) as response:
            if response.status == 200:
                await query.message.reply_text('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!')
            else:
                error_message = await response.text()
                await query.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {error_message}')

    await view_cart(update, context)
