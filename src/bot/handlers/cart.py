import logging
from enum import Enum

import aiohttp
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)

from src.bot.handlers.users import TelegramUserManager

logging.basicConfig(level=logging.INFO)

API_BASE_URL = 'http://nginx:8000'


class CartState(Enum):
    CHANGE_QUANTITY = 1


CHANGE_QUANTITY = 1


async def send_request(method: str, url: str, data: dict = None) -> dict:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä."""
    method = method.lower()
    try:
        async with aiohttp.ClientSession() as session:
            async with getattr(session, method)(url, json=data) as response:
                if response.ok:
                    return await response.json()
                error_message = await response.text()
                logging.error(f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {error_message}')
                return {'error': error_message}
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}')
        return {'error': '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º'}


async def checkout(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)
    await delete_cart_messages(update, context)

    data = await send_request(
        'post', f'{API_BASE_URL}/orders', {'telegram_id': user_id}
    )

    if 'error' not in data:
        await query.message.reply_text(
            '‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.'
        )
    else:
        await query.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        )


async def view_cart(update: Update, context: CallbackContext) -> None:
    message = (
        update.message if update.message else update.callback_query.message
    )
    user_id = str(update.effective_user.id)
    await delete_cart_messages(update, context)
    data = await send_request(
        'post', f'{API_BASE_URL}/user/cart/me', {'telegram_id': user_id}
    )
    if 'error' in data:
        await message.reply_text(
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω—ã: {data["error"]}'
        )
        return

    cart_items = data if isinstance(data, list) else data.get('items', [])
    if not cart_items:
        await message.reply_text('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.')
        return

    context.user_data['cart_items'] = cart_items
    context.user_data['cart_messages'] = []

    total_price = 0
    buttons = []

    message_start = await message.reply_text(
        'üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:',
        parse_mode='Markdown',
    )
    context.user_data['cart_messages'].append(message_start.message_id)

    for item in cart_items:
        firework_id = item['firework']['id']
        product_name = item['firework']['name']
        amount = item['amount']
        price = float(item['firework']['price'])
        total_price += price * amount

        cart_text = (
            f'üîπ *{product_name}*: *{amount}* —à—Ç.\n'
            f'–¶–µ–Ω–∞ –∑–∞ —à—Ç.: *{price:.2f}* —Ä—É–±.'
        )
        buttons = [
            [
                InlineKeyboardButton(
                    '‚úè –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    callback_data=f'change_item_{firework_id}',
                )
            ],
            [
                InlineKeyboardButton(
                    '‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
                    callback_data=f'remove_{firework_id}',
                )
            ],
        ]
        message = await message.reply_text(
            cart_text,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode='Markdown',
        )
        context.user_data['cart_messages'].append(message.message_id)

    total_message = f'–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã: *{total_price:.2f}* —Ä—É–±.'
    checkout_buttons = [
        [
            InlineKeyboardButton(
                '‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', callback_data='clear_cart'
            )
        ],
        [InlineKeyboardButton('‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data='checkout')],
        [InlineKeyboardButton('üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back')],
    ]
    cart_message = await message.reply_text(
        total_message,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(checkout_buttons),
    )
    context.user_data['cart_messages'].append(cart_message.message_id)


async def remove_item(
    update: Update, context: CallbackContext, item_id: str
) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    query = update.callback_query
    await query.answer()
    user_id = str(update.effective_user.id)

    product_name = get_product_name(context, item_id)
    await delete_cart_messages(update, context)

    await send_request(
        'delete',
        f'{API_BASE_URL}/user/cart/{item_id}',
        {'telegram_id': user_id},
    )
    await query.message.reply_text(
        f'‚úÖ –¢–æ–≤–∞—Ä {product_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.'
    )
    await view_cart(update, context)


async def clear_cart_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)
    await delete_cart_messages(update, context)

    await send_request(
        'delete', f'{API_BASE_URL}/user/cart/', {'telegram_id': user_id}
    )
    await query.message.reply_text('‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!')
    await view_cart(update, context)


async def change_quantity_entry(
    update: Update, context: CallbackContext
) -> int:
    """–®–∞–≥ 1: –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É 'change_item_{item_id}'.

    –ò–∑–≤–ª–µ–∫–∞–µ–º item_id, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ.
    """
    query = update.callback_query
    await query.answer()

    item_id = query.data.split('_')[-1]
    context.user_data['current_item_id'] = item_id
    product_name = get_product_name(context, item_id)
    await delete_cart_messages(update, context)
    back_button = InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='main-menu')
    reply_markup = InlineKeyboardMarkup([[back_button]])

    message_1 = await query.message.reply_text(
        f'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ *{product_name}*, '
        f'–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –¥–ª—è –æ—Ç–º–µ–Ω—ã.',
        parse_mode='Markdown',
        reply_markup=reply_markup,
    )
    message_2 = await query.message.reply_text(
        '–ß—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥',
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data['cart_messages'].append(message_1.message_id)
    context.user_data['cart_messages'].append(message_2.message_id)
    return CartState.CHANGE_QUANTITY.value


async def handle_new_quantity(update: Update, context: CallbackContext) -> int:
    """–®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."""
    new_amount_text = update.message.text.strip()

    if not new_amount_text.isdigit() or int(new_amount_text) <= 0:
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.'
        )
        return CartState.CHANGE_QUANTITY.value

    new_amount = int(new_amount_text)
    item_id = context.user_data.get('current_item_id')

    if item_id is None:
        await update.message.reply_text('–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
        return ConversationHandler.END

    product_name = get_product_name(context, item_id)
    user_id = str(update.effective_user.id)
    await send_request(
        'patch',
        f'{API_BASE_URL}/user/cart/{item_id}',
        {
            'update_data': {'telegram_id': user_id, 'amount': new_amount},
            'user_ident': {'telegram_id': user_id},
        },
    )
    await update.message.reply_text(
        f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ *{product_name}* '
        f'–æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{new_amount}* —à—Ç.',
        parse_mode='Markdown',
    )
    user_manager = TelegramUserManager(application=context.application)
    keyboard = user_manager.main_keyboard()

    await update.message.reply_text(
        text='–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', reply_markup=keyboard
    )
    await view_cart(update, context)
    return ConversationHandler.END


async def handle_back_to_cart(update: Update, context: CallbackContext) -> int:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ª—é–±–æ–≥–æ ConversationHandler."""
    query = update.callback_query
    await query.answer()
    user_manager = TelegramUserManager(application=context.application)
    keyboard = user_manager.main_keyboard()
    message = (
        update.message if update.message else update.callback_query.message
    )
    await message.reply_text(text='–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã', reply_markup=keyboard)
    await view_cart(update, context)
    return ConversationHandler.END


def setup_cart_handler(application: ApplicationBuilder) -> None:
    cart_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(
                change_quantity_entry, pattern=r'^change_item_\d+$'
            )
        ],
        states={
            CHANGE_QUANTITY: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND, handle_new_quantity
                ),
            ],
        },
        fallbacks=[
            CallbackQueryHandler(handle_back_to_cart, pattern='^main-menu$')
        ],
    )
    application.add_handler(cart_conv_handler)


async def delete_cart_messages(
    update: Update, context: CallbackContext
) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π, –∏–∑ —á–∞—Ç–∞."""
    cart_messages = context.user_data.get('cart_messages', [])
    if not cart_messages:
        return

    for message_id in cart_messages:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id, message_id=message_id
            )
            print(f'–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {message_id}')
        except Exception as e:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id}: {e}')

    context.user_data['cart_messages'] = []


def get_product_name(context: CallbackContext, item_id: str) -> str:
    """–ò—â–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ ID –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cart_items = context.user_data.get('cart_items', [])
    return next(
        (
            item['firework']['name']
            for item in cart_items
            if str(item['firework']['id']) == item_id
        ),
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä',
    )
