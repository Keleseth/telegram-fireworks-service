name: style_check

on:
   pull_request:
   push:
     branches:
       - develop
       - master
       - feature/develop

jobs:
  check_style:
    # Разворачиваем окружение:
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:17.4
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: joker_fireworks
          POSTGRES_PASSWORD: joker_fireworks_password
          POSTGRES_DB: joker_fireworks
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set-up python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install dependies
        run: |
          python -m pip install --upgrade pip
          pip install ruff==0.9.4 pytest==8.3.5
          pip install -r ./src/requirements.txt
      - name: Test style
        run: python -m ruff check ./src

# Деплой приложения
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-20.04
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push app image
        run: |
          docker build -t anium/joker_fireworks_app:latest -f ./infra/Dockerfile .
          docker push anium/joker_fireworks_app:latest

      - name: Build and push bot image
        run: |
          docker build -t anium/joker_fireworks_bot:latest -f ./infra/Dockerfile_bot .
          docker push anium/joker_fireworks_bot:latest

      - name: Build and push nginx image
        run: |
          docker build -t anium/joker_fireworks_nginx:latest -f ./infra/Dockerfile.nginx .
          docker push anium/joker_fireworks_nginx:latest

  deploy:
    runs-on: ubuntu-20.04
    needs:
      # Дождёмся билда приложения
      - build_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер
    - name: Copy ./infra/docker-compose.yaml via ssh
      uses: appleboy/scp-action@master
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.yaml"
        target: "/opt/jokerfire/joker_fireworks_team2/"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          cd /opt/jokerfire/joker_fireworks_team2
          # Удаляет контейнеры, образы, сети, кэш сборки
          docker system prune -a --volumes --force
          # Чистая сборка с игнорированием кэша
          docker compose -f docker-compose.yaml build --no-cache
          # Запуск контейнеров
          docker compose -f docker-compose.yaml up -d
