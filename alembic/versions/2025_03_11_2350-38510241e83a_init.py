"""init

Revision ID: 38510241e83a
Revises:
Create Date: 2025-03-11 23:50:03.500881

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '38510241e83a'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('address',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('address'),
    sa.UniqueConstraint('id')
    )
    op.create_table('botinfo',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('bot_info', sa.Text(), nullable=False),
    sa.Column('about_company', sa.Text(), nullable=False),
    sa.Column('contacts', sa.Text(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('discount',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('media',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('media_url', sa.String(), nullable=False),
    sa.Column('media_type', sa.String(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('media_url')
    )
    op.create_table('orderstatus',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status_text', sa.String(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('user',
    sa.Column('telegram_id', sa.BigInteger(), nullable=True),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('nickname', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('age_verified', sa.Boolean(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('nickname'),
    sa.UniqueConstraint('phone_number'),
    sa.UniqueConstraint('telegram_id')
    )
    op.create_table('useraddress',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('address_id', sa.Integer(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['address_id'], ['address.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('user_id', 'address_id', name='unique_user_address')
    )
    op.create_table('cart',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('firework_id', sa.Integer(), nullable=False),
    sa.Column('user_id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('amount >= 1', name='min_cart_amount'),
    sa.ForeignKeyConstraint(['firework_id'], ['firework.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('user_id', 'firework_id', name='unique_cart_item')
    )
    op.create_table('favoritefirework',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.Column('firework_id', sa.Integer(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['firework_id'], ['firework.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('user_id', 'firework_id', name='unique_favorite')
    )
    op.create_table('firework_media',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('firework_id', sa.Integer(), nullable=False),
    sa.Column('image_id', sa.Integer(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['firework_id'], ['firework.id'], ),
    sa.ForeignKeyConstraint(['image_id'], ['media.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('fireworkdiscount',
    sa.Column('firework_id', sa.Integer(), nullable=False),
    sa.Column('discount_id', sa.Integer(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['discount_id'], ['discount.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['firework_id'], ['firework.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('firework_id', 'discount_id')
    )
    op.create_table('order',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('user_address_id', sa.Integer(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['status_id'], ['orderstatus.id'], ),
    sa.ForeignKeyConstraint(['user_address_id'], ['useraddress.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('orderfirework',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('firework_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('price_per_unit', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['firework_id'], ['firework.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.alter_column('category', 'parent_category_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_unique_constraint(None, 'category', ['id'])
    op.add_column('firework', sa.Column('code', sa.String(), nullable=False))
    op.add_column('firework', sa.Column('measurement_unit', sa.Enum('PIECES', 'PACK', name='measurementunit'), nullable=False))
    op.add_column('firework', sa.Column('charges_count', sa.Integer(), nullable=True))
    op.add_column('firework', sa.Column('effects_count', sa.Integer(), nullable=True))
    op.add_column('firework', sa.Column('product_size', sa.String(), nullable=False))
    op.add_column('firework', sa.Column('packing_material', sa.String(), nullable=True))
    op.add_column('firework', sa.Column('article', sa.String(), nullable=False))
    op.alter_column('firework', 'price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=False)
    op.create_unique_constraint(None, 'firework', ['product_size'])
    op.create_unique_constraint(None, 'firework', ['id'])
    op.create_unique_constraint(None, 'firework', ['code'])
    op.drop_column('firework', 'image_url')
    op.drop_column('firework', 'video_url')
    op.create_unique_constraint(None, 'firework_tag', ['id'])
    op.create_unique_constraint(None, 'tag', ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tag', type_='unique')
    op.drop_constraint(None, 'firework_tag', type_='unique')
    op.add_column('firework', sa.Column('video_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('firework', sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'firework', type_='unique')
    op.drop_constraint(None, 'firework', type_='unique')
    op.drop_constraint(None, 'firework', type_='unique')
    op.alter_column('firework', 'price',
               existing_type=sa.NUMERIC(precision=10, scale=2),
               nullable=True)
    op.drop_column('firework', 'article')
    op.drop_column('firework', 'packing_material')
    op.drop_column('firework', 'product_size')
    op.drop_column('firework', 'effects_count')
    op.drop_column('firework', 'charges_count')
    op.drop_column('firework', 'measurement_unit')
    op.drop_column('firework', 'code')
    op.drop_constraint(None, 'category', type_='unique')
    op.alter_column('category', 'parent_category_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_table('orderfirework')
    op.drop_table('order')
    op.drop_table('fireworkdiscount')
    op.drop_table('firework_media')
    op.drop_table('favoritefirework')
    op.drop_table('cart')
    op.drop_table('useraddress')
    op.drop_table('user')
    op.drop_table('orderstatus')
    op.drop_table('media')
    op.drop_table('discount')
    op.drop_table('botinfo')
    op.drop_table('address')
    # ### end Alembic commands ###
